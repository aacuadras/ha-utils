// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.1
// source: docker.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DockerUtilsClient is the client API for DockerUtils service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DockerUtilsClient interface {
	StartContainer(ctx context.Context, in *ContainerRequest, opts ...grpc.CallOption) (*ContainerResponse, error)
	StopContainer(ctx context.Context, in *ContainerRequest, opts ...grpc.CallOption) (*ContainerResponse, error)
}

type dockerUtilsClient struct {
	cc grpc.ClientConnInterface
}

func NewDockerUtilsClient(cc grpc.ClientConnInterface) DockerUtilsClient {
	return &dockerUtilsClient{cc}
}

func (c *dockerUtilsClient) StartContainer(ctx context.Context, in *ContainerRequest, opts ...grpc.CallOption) (*ContainerResponse, error) {
	out := new(ContainerResponse)
	err := c.cc.Invoke(ctx, "/DockerUtils/StartContainer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dockerUtilsClient) StopContainer(ctx context.Context, in *ContainerRequest, opts ...grpc.CallOption) (*ContainerResponse, error) {
	out := new(ContainerResponse)
	err := c.cc.Invoke(ctx, "/DockerUtils/StopContainer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DockerUtilsServer is the server API for DockerUtils service.
// All implementations must embed UnimplementedDockerUtilsServer
// for forward compatibility
type DockerUtilsServer interface {
	StartContainer(context.Context, *ContainerRequest) (*ContainerResponse, error)
	StopContainer(context.Context, *ContainerRequest) (*ContainerResponse, error)
	mustEmbedUnimplementedDockerUtilsServer()
}

// UnimplementedDockerUtilsServer must be embedded to have forward compatible implementations.
type UnimplementedDockerUtilsServer struct {
}

func (UnimplementedDockerUtilsServer) StartContainer(context.Context, *ContainerRequest) (*ContainerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartContainer not implemented")
}
func (UnimplementedDockerUtilsServer) StopContainer(context.Context, *ContainerRequest) (*ContainerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopContainer not implemented")
}
func (UnimplementedDockerUtilsServer) mustEmbedUnimplementedDockerUtilsServer() {}

// UnsafeDockerUtilsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DockerUtilsServer will
// result in compilation errors.
type UnsafeDockerUtilsServer interface {
	mustEmbedUnimplementedDockerUtilsServer()
}

func RegisterDockerUtilsServer(s grpc.ServiceRegistrar, srv DockerUtilsServer) {
	s.RegisterService(&DockerUtils_ServiceDesc, srv)
}

func _DockerUtils_StartContainer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContainerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DockerUtilsServer).StartContainer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DockerUtils/StartContainer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DockerUtilsServer).StartContainer(ctx, req.(*ContainerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DockerUtils_StopContainer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContainerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DockerUtilsServer).StopContainer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DockerUtils/StopContainer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DockerUtilsServer).StopContainer(ctx, req.(*ContainerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DockerUtils_ServiceDesc is the grpc.ServiceDesc for DockerUtils service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DockerUtils_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "DockerUtils",
	HandlerType: (*DockerUtilsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartContainer",
			Handler:    _DockerUtils_StartContainer_Handler,
		},
		{
			MethodName: "StopContainer",
			Handler:    _DockerUtils_StopContainer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "docker.proto",
}
