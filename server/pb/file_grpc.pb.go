// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.1
// source: file.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FileUtilsClient is the client API for FileUtils service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FileUtilsClient interface {
	SendFile(ctx context.Context, in *File, opts ...grpc.CallOption) (*ProcessedFile, error)
	SendFiles(ctx context.Context, opts ...grpc.CallOption) (FileUtils_SendFilesClient, error)
	CompareFile(ctx context.Context, in *File, opts ...grpc.CallOption) (*FileDiff, error)
	CompareFiles(ctx context.Context, opts ...grpc.CallOption) (FileUtils_CompareFilesClient, error)
}

type fileUtilsClient struct {
	cc grpc.ClientConnInterface
}

func NewFileUtilsClient(cc grpc.ClientConnInterface) FileUtilsClient {
	return &fileUtilsClient{cc}
}

func (c *fileUtilsClient) SendFile(ctx context.Context, in *File, opts ...grpc.CallOption) (*ProcessedFile, error) {
	out := new(ProcessedFile)
	err := c.cc.Invoke(ctx, "/FileUtils/SendFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileUtilsClient) SendFiles(ctx context.Context, opts ...grpc.CallOption) (FileUtils_SendFilesClient, error) {
	stream, err := c.cc.NewStream(ctx, &FileUtils_ServiceDesc.Streams[0], "/FileUtils/SendFiles", opts...)
	if err != nil {
		return nil, err
	}
	x := &fileUtilsSendFilesClient{stream}
	return x, nil
}

type FileUtils_SendFilesClient interface {
	Send(*File) error
	Recv() (*ProcessedFile, error)
	grpc.ClientStream
}

type fileUtilsSendFilesClient struct {
	grpc.ClientStream
}

func (x *fileUtilsSendFilesClient) Send(m *File) error {
	return x.ClientStream.SendMsg(m)
}

func (x *fileUtilsSendFilesClient) Recv() (*ProcessedFile, error) {
	m := new(ProcessedFile)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *fileUtilsClient) CompareFile(ctx context.Context, in *File, opts ...grpc.CallOption) (*FileDiff, error) {
	out := new(FileDiff)
	err := c.cc.Invoke(ctx, "/FileUtils/CompareFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileUtilsClient) CompareFiles(ctx context.Context, opts ...grpc.CallOption) (FileUtils_CompareFilesClient, error) {
	stream, err := c.cc.NewStream(ctx, &FileUtils_ServiceDesc.Streams[1], "/FileUtils/CompareFiles", opts...)
	if err != nil {
		return nil, err
	}
	x := &fileUtilsCompareFilesClient{stream}
	return x, nil
}

type FileUtils_CompareFilesClient interface {
	Send(*File) error
	Recv() (*FileDiff, error)
	grpc.ClientStream
}

type fileUtilsCompareFilesClient struct {
	grpc.ClientStream
}

func (x *fileUtilsCompareFilesClient) Send(m *File) error {
	return x.ClientStream.SendMsg(m)
}

func (x *fileUtilsCompareFilesClient) Recv() (*FileDiff, error) {
	m := new(FileDiff)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FileUtilsServer is the server API for FileUtils service.
// All implementations must embed UnimplementedFileUtilsServer
// for forward compatibility
type FileUtilsServer interface {
	SendFile(context.Context, *File) (*ProcessedFile, error)
	SendFiles(FileUtils_SendFilesServer) error
	CompareFile(context.Context, *File) (*FileDiff, error)
	CompareFiles(FileUtils_CompareFilesServer) error
	mustEmbedUnimplementedFileUtilsServer()
}

// UnimplementedFileUtilsServer must be embedded to have forward compatible implementations.
type UnimplementedFileUtilsServer struct {
}

func (UnimplementedFileUtilsServer) SendFile(context.Context, *File) (*ProcessedFile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendFile not implemented")
}
func (UnimplementedFileUtilsServer) SendFiles(FileUtils_SendFilesServer) error {
	return status.Errorf(codes.Unimplemented, "method SendFiles not implemented")
}
func (UnimplementedFileUtilsServer) CompareFile(context.Context, *File) (*FileDiff, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompareFile not implemented")
}
func (UnimplementedFileUtilsServer) CompareFiles(FileUtils_CompareFilesServer) error {
	return status.Errorf(codes.Unimplemented, "method CompareFiles not implemented")
}
func (UnimplementedFileUtilsServer) mustEmbedUnimplementedFileUtilsServer() {}

// UnsafeFileUtilsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FileUtilsServer will
// result in compilation errors.
type UnsafeFileUtilsServer interface {
	mustEmbedUnimplementedFileUtilsServer()
}

func RegisterFileUtilsServer(s grpc.ServiceRegistrar, srv FileUtilsServer) {
	s.RegisterService(&FileUtils_ServiceDesc, srv)
}

func _FileUtils_SendFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(File)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileUtilsServer).SendFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FileUtils/SendFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileUtilsServer).SendFile(ctx, req.(*File))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileUtils_SendFiles_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FileUtilsServer).SendFiles(&fileUtilsSendFilesServer{stream})
}

type FileUtils_SendFilesServer interface {
	Send(*ProcessedFile) error
	Recv() (*File, error)
	grpc.ServerStream
}

type fileUtilsSendFilesServer struct {
	grpc.ServerStream
}

func (x *fileUtilsSendFilesServer) Send(m *ProcessedFile) error {
	return x.ServerStream.SendMsg(m)
}

func (x *fileUtilsSendFilesServer) Recv() (*File, error) {
	m := new(File)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _FileUtils_CompareFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(File)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileUtilsServer).CompareFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FileUtils/CompareFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileUtilsServer).CompareFile(ctx, req.(*File))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileUtils_CompareFiles_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FileUtilsServer).CompareFiles(&fileUtilsCompareFilesServer{stream})
}

type FileUtils_CompareFilesServer interface {
	Send(*FileDiff) error
	Recv() (*File, error)
	grpc.ServerStream
}

type fileUtilsCompareFilesServer struct {
	grpc.ServerStream
}

func (x *fileUtilsCompareFilesServer) Send(m *FileDiff) error {
	return x.ServerStream.SendMsg(m)
}

func (x *fileUtilsCompareFilesServer) Recv() (*File, error) {
	m := new(File)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FileUtils_ServiceDesc is the grpc.ServiceDesc for FileUtils service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FileUtils_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "FileUtils",
	HandlerType: (*FileUtilsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendFile",
			Handler:    _FileUtils_SendFile_Handler,
		},
		{
			MethodName: "CompareFile",
			Handler:    _FileUtils_CompareFile_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendFiles",
			Handler:       _FileUtils_SendFiles_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "CompareFiles",
			Handler:       _FileUtils_CompareFiles_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "file.proto",
}
